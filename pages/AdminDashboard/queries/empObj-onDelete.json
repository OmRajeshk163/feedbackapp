{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "onDelete",
    "fullyQualifiedName": "empObj.onDelete",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "AdminDashboard",
    "collectionId": "AdminDashboard_empObj",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "() => {\n  try {\n    getReference.run(() => {\n      getFeedback.run();\n      const isReviewer = getEmployees.data.some(rev => rev.reviewer === employeeTable.selectedRow.id);\n      console.log(\"isReviewerisReviewer\", getEmployees.data, getReference.data, isReviewer, employeeTable.selectedRow.name);\n      if (getReference.data.length === 0 && !isReviewer) {\n        deleteEmployee.run(() => {\n          getEmployees.run();\n          showAlert(\"Deleted Successfully\", 'success');\n          closeModal('deleteEmpModal');\n        });\n      } else {\n        if (isReviewer) {\n          showAlert(`Please remove the references of ${employeeTable.selectedRow.name} first and then delete the record`, 'error');\n        } else {\n          showAlert(`Please Delete feedbacks of ${employeeTable.selectedRow.name} first and then delete the record`, 'error');\n        }\n        closeModal('deleteEmpModal');\n      }\n    });\n  } catch (error) {\n    showAlert(\"Failed to delete\", 'error');\n    closeModal('deleteEmpModal');\n  }\n}",
      "selfReferencingDataPaths": [],
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "() => {\n  try {\n    getReference.run(() => {\n      getFeedback.run();\n      const isReviewer = getEmployees.data.some(rev => rev.reviewer === employeeTable.selectedRow.id);\n      console.log(\"isReviewerisReviewer\", getEmployees.data, getReference.data, isReviewer, employeeTable.selectedRow.name);\n      if (getReference.data.length === 0 && !isReviewer) {\n        deleteEmployee.run(() => {\n          getEmployees.run();\n          showAlert(\"Deleted Successfully\", 'success');\n          closeModal('deleteEmpModal');\n        });\n      } else {\n        if (isReviewer) {\n          showAlert(`Please remove the references of ${employeeTable.selectedRow.name} first and then delete the record`, 'error');\n        } else {\n          showAlert(`Please Delete feedbacks of ${employeeTable.selectedRow.name} first and then delete the record`, 'error');\n        }\n        closeModal('deleteEmpModal');\n      }\n    });\n  } catch (error) {\n    showAlert(\"Failed to delete\", 'error');\n    closeModal('deleteEmpModal');\n  }\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "AdminDashboard_empObj.onDelete",
  "deleted": false,
  "gitSyncId": "6361ef20dfa75b056e2ed6b2_63733f20d1e55452b540e1f4"
}